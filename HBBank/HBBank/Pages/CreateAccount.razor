@page "/createaccount"
@using System.ComponentModel.DataAnnotations
@inject IAccountService AccountService;

<h3>Vänligen skapa ett konto</h3>
<EditForm Model="_model" OnValidSubmit="CreateAccountAsync">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="mb-2 d-flex align-items-center">
        <label class="me-2" style="width:120px;">Kontonamn</label>
        <InputText @bind-Value="_model.Name" class="form-control" style="flex:1"/>
    </div>

    <div class="mb-2 d-flex align-items-center">
        <label class="me-2" style="width:120px;">Kontotyp</label>
        <InputSelect @bind-Value="_model.AccountType" class="form-select" style="flex:1">
            <option value="@AccountType.Unknown">Välj kontotyp!</option>
            <option value="@AccountType.Deposit">Lönekonto</option>
            <option value="@AccountType.Savings">Sparkonto</option>
        </InputSelect>
    </div>

    <div class="mb-2 d-flex align-items-center">
        <label class="me-2" style="width:120px;">Valuta</label>
        <InputSelect @bind-Value="_model.Currency" class="form-select" style="flex:1">
            <option value="@CurrencyType.SEK">SEK</option>
        </InputSelect>
    </div>

    <div class="mb-2 d-flex align-items-center">
        <label class="me-2" style="width:120px;">Start saldo</label>
        <InputNumber @bind-Value="_model.InitialBalance" class="form-control" style="flex:1"/>
    </div>

    <button type="submit" class="btn btn-primary">Skapa Konto</button>
</EditForm>

<h3 class="mt-4">Kontolista</h3>

@if (_accounts == null || _accounts.Count == 0)
{
    <p>Inga konton har skapats ännu.</p>
}
else
{
    <table class="table table-striped" style="table-layout: fixed;">
        <thead>
        <tr>
            <th>Namn</th>
            <th>Kontotyp</th>
            <th>Saldo</th>
            <th>Senast uppdaterad</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var account in _accounts)
        {
            <tr>
                <td>@account.Name</td>
                <td>
                    @(account.AccountType switch
                    {
                        AccountType.Savings => "Lönekonto",
                        AccountType.Deposit => "Sparkonto",
                        _ => "Okänd"
                    })
                </td>
                <td>@account.Balance.ToString("C")</td>
                <td>@account.LastUpdated.ToString("yyyy-MM-dd HH:mm")</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private readonly CreateAccountModel _model = new();
    private List<IBankAccount> _accounts = new();

    protected override async Task OnInitializedAsync()
    {
        _accounts = await AccountService.GetAccounts();
    }

    private async Task CreateAccountAsync()
    {
        try
        {
            var newAccount = await AccountService.CreateAccount(
                _model.Name,
                _model.AccountType,
                _model.Currency.ToString(),
                _model.InitialBalance
            );

            _accounts = await AccountService.GetAccounts();
            _model.Clear();
            StateHasChanged();
        }
        catch (Exception exception)
        {
            Console.WriteLine(exception);
        }
    }

    private class CreateAccountModel
    {
        [Required(ErrorMessage = "Kontonamn måste anges")]
        public string? Name { get; set; }

        public AccountType AccountType { get; set; } = AccountType.Unknown;
        public CurrencyType Currency { get; set; }

        [Range(0.01, double.MaxValue, ErrorMessage = "Startbelopp måste vara större än 0")]
        public decimal InitialBalance { get; set; } = 0;

        public void Clear()
        {
            Name = string.Empty;
            AccountType = AccountType.Unknown;
            Currency = CurrencyType.SEK;
            InitialBalance = 0;
        }
    }

}