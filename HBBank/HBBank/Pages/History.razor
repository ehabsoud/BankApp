@page "/history"
@inject IAccountService AccountService

<h3>Transaktionshistorik</h3>

<div class="mb-2 d-flex align-items-center">
    <label class="me-2" style="width:120px;">Typ av transaktion</label>
    <InputSelect @bind-Value="_selectedFilter" class="form-select" style="flex:1">
        <option value="">Välj typ</option>
        <option value="DepositWithdraw">Insättning / Uttag</option>
        <option value="Transfer">Överföring</option>
    </InputSelect>
</div>

<div class="mb-2 d-flex align-items-center">
    <label class="me-2" style="width:120px;">Välj konto</label>
    <InputSelect @bind-Value="_selectedAccountId" class="form-select" style="flex:1">
        <option value="">Alla konton</option>
        @foreach (var account in _accounts)
        {
            <option value="@account.Id">@account.Name (@GetAccountTypeDisplay(account.AccountType))</option>
        }
    </InputSelect>
</div>

@if (string.IsNullOrEmpty(_selectedFilter))
{
    <p>Välj en typ av transaktion ovan för att visa historik.</p>
}
else if (!_transactions.Any())
{
    <p>Inga transaktioner hittades.</p>
}
else
{
    <table class="table table-striped">
        <thead>
        <tr>
            <th style="width:130px; cursor:pointer;" @onclick="() => SortByColumn(nameof(Transaction.Date))">
                Datum <span>@GetSortArrow(nameof(Transaction.Date))</span>
            </th>
            <th style="width:120px;">Typ</th>

            @if (_selectedFilter == "DepositWithdraw")
            {
                <th style="width:200px;">Konto</th>
            }
            else
            {
                <th style="width:160px;">Från konto</th>
                <th style="width:160px;">Till konto</th>
            }

            <th style="width:110px; cursor:pointer;" @onclick="() => SortByColumn(nameof(Transaction.Amount))">
                Belopp <span>@GetSortArrow(nameof(Transaction.Amount))</span>
            </th>

            <th style="width:110px;">Saldo innan</th>
            <th style="width:110px;">Saldo efter</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var transaction in FilteredTransactions())
        {
            <tr>
                <td>@transaction.Date.ToString("yyyy-MM-dd HH:mm")</td>
                <td>@GetTransactionTypeDisplay(transaction.Type)</td>

                @if (_selectedFilter == "DepositWithdraw")
                {
                    <td>@GetToAccount(transaction)</td>
                }
                else
                {
                    <td>@GetFromAccount(transaction)</td>
                    <td>@GetToAccount(transaction)</td>
                }

                <td>@transaction.Amount.ToString("C")</td>
                <td>@transaction.BalanceBefore.ToString("C")</td>
                <td>@transaction.BalanceAfter.ToString("C")</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<Transaction> _transactions = new();
    private List<IBankAccount> _accounts = new();
    private string _selectedFilter = string.Empty;
    private Guid? _selectedAccountId = null;

    private string _sortColumn = nameof(Transaction.Date);
    private bool _sortAscending = false;

    protected override async Task OnInitializedAsync()
    {
        _accounts = await AccountService.GetAccounts();
        var allTransactions = new List<Transaction>();

        foreach (var account in _accounts)
        {
            var accTransactions = await AccountService.GetTransactions(account.Id);
            allTransactions.AddRange(accTransactions);
        }

        // Ta bort dubletter
        _transactions = allTransactions
            .GroupBy(t => t.Id)
            .Select(g => g.First())
            .ToList();

        SortTransactions();
    }

    private IEnumerable<Transaction> FilteredTransactions()
    {
        var filtered = _transactions.Where(t =>
            (_selectedFilter == "DepositWithdraw" && (t.Type == "Deposit" || t.Type == "Withdraw")) ||
            (_selectedFilter == "Transfer" && t.Type == "Transfer"));

        if (_selectedAccountId.HasValue)
        {
            filtered = filtered.Where(t =>
                (_selectedFilter == "DepositWithdraw" && t.AccountId == _selectedAccountId) ||
                (_selectedFilter == "Transfer" && (t.AccountId == _selectedAccountId || t.ToAccountId == _selectedAccountId))
            );
        }

        return filtered;
    }

    private void SortByColumn(string columnName)
    {
        if (_sortColumn == columnName)
        {
            _sortAscending = !_sortAscending;
        }
        else
        {
            _sortColumn = columnName;
            _sortAscending = true;
        }
        SortTransactions();
    }

    private void SortTransactions()
    {
        _transactions = _sortColumn switch
        {
            nameof(Transaction.Date) => _sortAscending
                ? _transactions.OrderBy(t => t.Date).ToList()
                : _transactions.OrderByDescending(t => t.Date).ToList(),
            nameof(Transaction.Amount) => _sortAscending
                ? _transactions.OrderBy(t => t.Amount).ToList()
                : _transactions.OrderByDescending(t => t.Amount).ToList(),
            _ => _transactions
        };
    }

    private string GetSortArrow(string columnName)
    {
        if (_sortColumn == columnName)
        {
            return _sortAscending ? "▲" : "▼";
        }
        else
        {
            return "▲";
        }
    }

    private string GetTransactionTypeDisplay(string type) => type switch
    {
        "Deposit" => "Insättning",
        "Withdraw" => "Uttag",
        "Transfer" => "Överföring",
        _ => type
    };

    private string GetFromAccount(Transaction transaction)
    {
        var account = _accounts.FirstOrDefault(a => a.Id == transaction.AccountId);
        var nameWithType = account != null ? $"{account.Name} ({GetAccountTypeDisplay(account.AccountType)})" : "-";

        return transaction.Type switch
        {
            "Deposit" => "-",
            "Withdraw" => nameWithType,
            "Transfer" => nameWithType,
            _ => "-"
        };
    }

    private string GetToAccount(Transaction transaction)
    {
        if (transaction.Type == "Deposit" || transaction.Type == "Withdraw")
        {
            var account = _accounts.FirstOrDefault(a => a.Id == transaction.AccountId);
            return account != null ? $"{account.Name} ({GetAccountTypeDisplay(account.AccountType)})" : "-";
        }
        else if (transaction.Type == "Transfer" && transaction.ToAccountId.HasValue)
        {
            var account = _accounts.FirstOrDefault(a => a.Id == transaction.ToAccountId.Value);
            return account != null ? $"{account.Name} ({GetAccountTypeDisplay(account.AccountType)})" : "-";
        }

        return "-";
    }

    private string GetAccountTypeDisplay(AccountType type) => type switch
    {
        AccountType.Savings => "Sparkonto",
        AccountType.Deposit => "Lönekonto",
        AccountType.Unknown => "Okänt konto",
        _ => "Okänt konto"
    };
}