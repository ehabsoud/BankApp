@page "/history"
@inject IAccountService AccountService

<h3>Transaktionshistorik</h3>

<div class="mb-2 d-flex align-items-center">
    <label class="me-2" style="width:120px;">Typ av transaktion</label>
    <InputSelect @bind-Value="_selectedFilter" class="form-select" style="flex:1">
        <option value="">Välj typ</option>
        <option value="DepositWithdraw">Insättning / Uttag</option>
        <option value="Transfer">Överföring</option>
    </InputSelect>
</div>

@if (string.IsNullOrEmpty(_selectedFilter))
{
    <p>Välj en typ av transaktion ovan för att visa historik.</p>
}
else if (!_transactions.Any())
{
    <p>Inga transaktioner hittades.</p>
}
else
{
    <table class="table table-striped">
        <thead>
        <tr>
            <th style="width:130px">Datum</th>
            <th style="width:120px;">Typ</th>
            <th style="width:160px;">Från konto</th>
            <th style="width:160px;">Till konto</th>
            <th style="width:110px;">Saldo innan</th>
            <th style="width:110px;">Belopp</th>
            <th style="width:110px;">Saldo efter</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var transaction in _transactions.Where(t =>
                      (_selectedFilter == "DepositWithdraw" && (t.Type == "Deposit" || t.Type == "Withdraw")) ||
                      (_selectedFilter == "Transfer" && t.Type == "Transfer")))
        {
            <tr>
                <td>@transaction.Date.ToString("yyyy-MM-dd HH:mm")</td>
                <td>@GetTransactionTypeDisplay(transaction.Type)</td>
                <td>@GetFromAccount(transaction)</td>
                <td>@GetToAccount(transaction)</td>
                <td>@transaction.BalanceBefore.ToString("C")</td>
                <td>@transaction.Amount.ToString("C")</td>
                <td>@transaction.BalanceAfter.ToString("C")</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<Transaction> _transactions = new();
    private List<IBankAccount> _accounts = new();

    private string _selectedFilter = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _accounts = await AccountService.GetAccounts();
        _transactions = new List<Transaction>();

        foreach (var account in _accounts)
        {
            var accTransactions = await AccountService.GetTransactions(account.Id);
            _transactions.AddRange(accTransactions);
        }

        _transactions = _transactions
            .GroupBy(t => t.Id) // Grupp efter unikt transaktions-id
            .Select(g => g.First()) // Ta bara första transaktionen i varje grupp
            .OrderByDescending(t => t.Date)
            .ToList();
    }

    private string GetTransactionTypeDisplay(string type)
    {
        return type switch
        {
            "Deposit" => "Insättning",
            "Withdraw" => "Uttag",
            "Transfer" => "Överföring",
            _ => type
        };
    }

    private string GetFromAccount(Transaction transaction)
    {
        return transaction.Type switch
        {
            "Deposit" => "-", // insättning kommer in
            "Withdraw" => _accounts.FirstOrDefault(a => a.Id == transaction.AccountId)?.Name ?? "-",
            "Transfer" => _accounts.FirstOrDefault(a => a.Id == transaction.AccountId)?.Name ?? "-",
            _ => "-"
        };
    }

    private string GetToAccount(Transaction transaction)
    {
        return transaction.Type switch
        {
            "Deposit" => _accounts.FirstOrDefault(a => a.Id == transaction.AccountId)?.Name ?? "-",
            "Withdraw" => "-",
            "Transfer" => transaction.ToAccountId.HasValue
                ? _accounts.FirstOrDefault(a => a.Id == transaction.ToAccountId.Value)?.Name ?? "-"
                : "-",
            _ => "-"
        };
    }
}